<?xml version="1.0"?>

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="web-lab3" default="run-all" basedir=".">
    <property file=".env" />

    <!-- Setup directories -->
    <property name="src.dir" value="src/main/java" />
    <property name="web.dir" value="src/main/webapp" />
    <property name="build.dir" value="build" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="javadoc.dir" value="${build.dir}/javadoc" />
    <property name="checksums.dir" value="${build.dir}/checksums" />
    <property name="jar.file" value="${dist.dir}/${ant.project.name}.jar" />


    <property name="manifest.file" value="${build.dir}/MANIFEST.MF" />

    <!-- Setup test directories -->
    <property name="test.src.dir" value="src/main/tests" />
    <property name="test.build.dir" value="build/test-classes" />
    <property name="test.reports.dir" value="build/test-reports" />

    <!-- Setup Ivy -->
    <property name="ivy.install.version" value="2.5.1" />
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="lib.dir" value="lib" />

    <!-- Init directories -->
    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${javadoc.dir}" />
        <mkdir dir="${checksums.dir}" />
    </target>


    <!-- Automatically download Ivy -->
    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}" />
        <get
            src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}"
            skipexisting="true" />
    </target>

    <!-- Init Ivy -->
    <target name="init-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <pathelement location="${ivy.jar.file}" />
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
            uri="antlib:org.apache.ivy.ant"
            classpathref="ivy.lib.path" />
    </target>

    <target name="doc" depends="compile">
        <!-- Hash generation -->

        <checksum algorithm="MD5" forceOverwrite="yes" todir="${checksums.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
                <include name="**/*.xhtml" />
            </fileset>
        </checksum>


        <checksum algorithm="SHA-1" forceOverwrite="yes" todir="${checksums.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
                <include name="**/*.xhtml" />
            </fileset>
        </checksum>


        <!-- Javadoc generation -->
        <javadoc destdir="${javadoc.dir}" failonerror="false">
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar" />
            </classpath>
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
            </fileset>
        </javadoc>

        <!-- Creating manifest file with hashes -->
        <manifest file="${manifest.file}">
            <attribute name="Generated-By" value="Apache Ant" />
            <attribute name="Checksums" value="${checksums.dir}" />
        </manifest>

        <!-- Build doc -->
        <zip destfile="${javadoc.dir}/project-docs.zip">
            <fileset dir="${javadoc.dir}" />
            <fileset dir="${checksums.dir}" />
        </zip>
    </target>

    <target name="xml">
        <echo message="Validating XML files..." />

        <xmlvalidate
            lenient="false"
            failonerror="false"
            warn="true">

            <fileset dir="${basedir}">
                <include name="**/*.xml" />
                <exclude name="build/**" />
            </fileset>
        </xmlvalidate>

        <echo message="XML validation completed successfully!" />
    </target>


    <target name="set-env">
        <propertycopy name="current.java.home" from="java.${java.version}.home" />
        <propertycopy name="current.jvm.args" from="jvm.${java.version}.args" />

        <echo message="Using Java: ${current.java.home}" />
        <echo message="JVM args: ${current.jvm.args}" />
    </target>

    <target name="compile">
        <javac
            srcdir="src"
            destdir="build/classes"
            fork="true"
            executable="${current.java.home}/bin/javac"
            includeantruntime="false" />
    </target>

    <!-- Resolve dependencies -->
    <target name="resolve" depends="init-ivy, init">
        <ivy:resolve />
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision](-[classifier]).[ext]" />
    </target>


    <!-- Compile source -->
    <target name="compile" depends="resolve">
        <mkdir dir="build/classes" />
        <javac destdir="build/classes" includeantruntime="false">
            <src path="src" />
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- Build project -->
    <target name="build" depends="resolve, doc">
        <antcall target="compile" />
        <path id="cls.path">
            <fileset dir="lib" includes="**/*.jar" />
            <pathelement location="build/classes/space/nerfthis/data" />
        </path>
        <jar destfile="${build.dir}/${ant.project.name}.jar"
            basedir="build/classes/space/nerfthis/data" manifest="${build.dir}/MANIFEST.MF">
            <zipfileset dir="${checksums.dir}" prefix="META-INF/checksums" />
            <zipfileset dir="${javadoc.dir}" prefix="docs" />
            <manifest>
                <attribute name="Class-Path" value="${cls.path}" />
            </manifest>
        </jar>
    </target>

    <!-- Compile tests -->
    <target name="compile-tests" depends="compile">
        <mkdir dir="${test.build.dir}" />
        <javac
            srcdir="${test.src.dir}"
            destdir="${test.build.dir}"
            includeantruntime="false">
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar" />
                <pathelement path="build/classes" />
            </classpath>
        </javac>
    </target>

    <!-- Run tests -->
    <target name="test" depends="compile-tests">
        <mkdir dir="build/test-reports" />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement path="${test.build.dir}" />
                <pathelement path="build/classes" />
                <fileset dir="${lib.dir}" includes="**/*.jar" />
            </classpath>
            <formatter type="plain" />
            <test name="space.nerfthis.data.GeometryValidatorTest"
                todir="build/test-reports" />
        </junit>
    </target>

    <!--    according to the terms of reference,
it should have been done through scp,
 but scp does not accept a password,
 so let this target be implemented through sshpass for now-->
    <!--    <target name="scp" depends="build">-->
    <!--        <exec executable="scp">-->
    <!--            <arg value="-P"/>-->
    <!--            <arg value="${PORT}"/>-->
    <!--            <arg value="build/${ant.project.name}.jar"/>-->
    <!--            <arg value="${USER}@${SERVER}:lol"/>-->
    <!--        </exec>-->
    <!--    </target>-->

    <target name="scp" depends="build">
        <exec executable="sshpass">
            <arg value="-p${PASSWORD}" />
            <arg value="scp" />
            <arg value="-P" />
            <arg value="${PORT}" />
            <arg value="build/${ant.project.name}.jar" />
            <arg value="${USER}@${SERVER}:~/path" /> <!-- change path -->
        </exec>
    </target>


    <target name="run-all" depends="build">
        <echo>DONE</echo>
    </target>

    <target name="clean">
        <delete dir="build" />
    </target>
</project>